create DATABASE PIZZAHUT -- CREATING A DATABASE CALLED 'PIZZAHUT' FOR STORING ALL THE DATA 

CREATE TABLE ORDER_DETAILS(
ORDER_DETAILS_ID INT NOT NULL,
ORDER_ID INT NOT NULL,
PIZZA_ID INT NOT NULL,
QUANTITY INT NOT NULL,
PRIMARY KEY(ORDER_DETAILS_ID) );   -- NOW THE ORDER_DETAILS TABLE WILL BE CREATED IN THE PIZZAHUT DATABASE
-- IF WE HAVE DATA TABLES WE CAN INSERT DIRECTLY OTHERWISE WE SHOULD INSERT ALL THE VALUES MANUALLY

-- 1.Retrieve the total number of orders placed.
SELECT 
    COUNT(ORDER_ID) AS TOTAL_ORDERS
FROM
    ORDERS;
    
-- Calculate the total revenue generated from pizza sales.
SELECT 
    SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE) AS TOTAL_SALES
FROM
    ORDER_DETAILS
        JOIN
    PIZZAS ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID
    
    -- Identify the highest-priced pizza.
SELECT 
    PIZZA_TYPES.NAME, PIZZAS.PRICE
FROM
    PIZZA_TYPES
        JOIN
    PIZZAS ON PIZZAS.PIZZA_TYPE_ID = PIZZA_TYPES.PIZZA_TYPE_ID
ORDER BY PIZZAS.PRICE DESC
LIMIT 1

-- Identify the most common pizza size ordered
SELECT 
    PIZZAS.SIZE, COUNT(ORDER_DETAILS.ORDER_DETAILS_ID)
FROM
    PIZZAS
        JOIN
    ORDER_DETAILS ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID
GROUP BY PIZZAS.SIZE
ORDER BY ORDER_COUNT DESC;

-- List the top 5 most ordered pizza types along with their quantities.

SELECT 
    PIZZA_TYPES.NAME, SUM(ORDER_DETAILS.QUANTITY) AS QUANTITY
FROM
    PIZZA_TYPES
        JOIN
    PIZZAS ON PIZZAS.PIZZA_TYPE_ID = PIZZA_TYPES.PIZZA_TYPE_ID
        JOIN
    ORDER_DETAILS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
GROUP BY PIZZA_TYPES.NAME
ORDER BY QUANTITY DESC
LIMIT 5;

-- Join the necessary tables to find the total quantity of each pizza category ordered.
SELECT 
    PIZZA_TYPES.CATEGORY,
    SUM(ORDER_DETAILS.QUANTITY) AS QUANTITY
FROM
    PIZZA_TYPES
        JOIN
    PIZZAS ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
        JOIN
    ORDER_DETAILS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
GROUP BY PIZZA_TYPES.CATEGORY
ORDER BY QUANTITY DESC;

-- Determine the distribution of orders by hour of the day.

SELECT 
    HOUR(ORDER_TIME), COUNT(ORDER_ID)
FROM
    ORDERS
GROUP BY HOUR(ORDER_TIME);

-- Join relevant tables to find the category-wise distribution of pizzas.
SELECT 
    CATEGORY, COUNT(NAME)
FROM
    PIZZA_TYPES
GROUP BY CATEGORY

-- Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT 
    AVG(QUANTITY)
FROM
    (SELECT 
        ORDERS.ORDER_DATE, SUM(ORDER_DETAILS.QUANTITY) AS QUANTITY
    FROM
        ORDERS
    JOIN ORDER_DETAILS ON ORDERS.ORDER_ID = ORDER_DETAILS.ORDER_ID
    GROUP BY ORDERS.ORDER_DATE) AS ORDER_QUANTITY;
    
-- Determine the top 3 most ordered pizza types based on revenue.
SELECT 
    PIZZA_TYPES.NAME,
    SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE) AS REVENUE
FROM
    PIZZA_TYPES
        JOIN
    PIZZAS ON PIZZAS.PIZZA_TYPE_ID = PIZZA_TYPES.PIZZA_TYPE_ID
        JOIN
    ORDER_DETAILS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
GROUP BY PIZZA_TYPES.NAME
ORDER BY REVENUE DESC
LIMIT 3;

-- Calculate the percentage contribution of each pizza type to total revenue.
SELECT 
    PIZZA_TYPES.CATEGORY,
    ROUND(SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE) / (SELECT 
                    ROUND(SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE),
                                2) AS TOTAL_SALES
                FROM
                    ORDER_DETAILS
                        JOIN
                    PIZZAS ON PIZZAS.PIZZA_ID = ORDER_DETAILS.PIZZA_ID) * 100,
            2) AS REVENUE
FROM
    PIZZA_TYPES
        JOIN
    PIZZAS ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
        JOIN
    ORDER_DETAILS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
GROUP BY PIZZA_TYPES.CATEGORY
ORDER BY REVENUE DESC;

